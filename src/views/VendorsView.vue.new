<template>
  <div class="page-container">
    <div class="page-header">
      <h1>Vendors Management</h1>
      <div class="header-actions">
        <button @click="showAddForm = true" class="btn-primary">
          Add Vendor
        </button>
      </div>
    </div>

    <div class="filters-container">
      <input 
        type="text" 
        class="search-input"
        v-model="searchQuery"
        placeholder="Search vendors..."
      />
    </div>

    <!-- Vendors Table -->
    <div class="table-container">
      <table class="data-table">
        <thead>
          <tr>
            <th>Vendor Name</th>
            <th>Products</th>
            <th>Orders</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="vendor in paginatedVendors" :key="vendor.id">
            <td>{{ vendor.name }}</td>
            <td>
              <button 
                class="badge badge-success badge-clickable" 
                @click="navigateToProducts(vendor.id)"
                :disabled="!getVendorProductCount(vendor.id)"
              >
                {{ getVendorProductCount(vendor.id) }} Products
              </button>
            </td>
            <td>
              <button 
                class="badge badge-info badge-clickable" 
                @click="navigateToOrders(vendor.id)"
                :disabled="!getOrdersCount(vendor.id)"
              >
                {{ getOrdersCount(vendor.id) }} Orders
              </button>
            </td>
            <td>
              <div class="dropdown" :class="{ 'dropdown-open': openDropdown === vendor.id }">
                <button class="dropdown-toggle" @click="toggleDropdown(vendor.id)">
                  Actions â–¾
                </button>
                <div class="dropdown-menu">
                  <button @click="editVendor(vendor); closeDropdown()" class="dropdown-item">
                    Edit
                  </button>
                  <button @click="deleteVendor(vendor.id); closeDropdown()" class="dropdown-item delete-action">
                    Delete
                  </button>
                </div>
              </div>
            </td>
          </tr>
        </tbody>
      </table>

      <!-- Empty State -->
      <div v-if="filteredVendors.length === 0" class="empty-state">
        <h3>No vendors yet</h3>
        <p>Click the "Add Vendor" button to create your first vendor.</p>
      </div>
      
      <!-- Pagination -->
      <Pagination
        v-if="filteredVendors.length > 0"
        :current-page="currentPage"
        :total-items="filteredVendors.length"
        :per-page="itemsPerPage"
        @update:page="currentPage = $event"
      />
    </div>

    <!-- Add/Edit Vendor Modal -->
    <div v-if="showAddForm" class="modal-overlay" @click="closeModal">
      <div class="modal" @click.stop>
        <div class="modal-header">
          <h2>{{ editingVendor ? 'Edit Vendor' : 'Add New Vendor' }}</h2>
          <button @click="closeModal" class="close-btn">&times;</button>
        </div>
        <form @submit.prevent="saveVendor" class="form">
          <div class="form-group">
            <label>Vendor Name*</label>
            <input 
              v-model="formData.name" 
              type="text" 
              required 
              placeholder="Enter vendor name"
              class="form-input"
            >
          </div>

          <div v-if="errorMsg" class="error-message">
            {{ errorMsg }}
          </div>

          <div class="form-actions">
            <button type="button" @click="closeModal" class="btn-secondary">
              Cancel
            </button>
            <button type="submit" class="btn-primary" :disabled="submitting">
              {{ submitting ? 'Saving...' : (editingVendor ? 'Update' : 'Add') }}
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, computed, reactive, onMounted, onUnmounted, watch } from 'vue'
import { useInventoryStore } from '@/stores/inventory'
import { useRouter } from 'vue-router'
import Pagination from '@/components/Pagination.vue'

export default {
  components: {
    Pagination
  },
  name: 'VendorsView',
  setup() {
    const store = useInventoryStore()
    const router = useRouter()
    const showAddForm = ref(false)
    const submitting = ref(false)
    const errorMsg = ref('')
    const editingVendor = ref(null)
    const openDropdown = ref(null)
    const searchQuery = ref('')
    
    // Pagination variables
    const currentPage = ref(1)
    const itemsPerPage = ref(10)

    onMounted(async () => {
      try {
        await Promise.all([
          store.vendors.length === 0 ? store.fetchVendors() : Promise.resolve(),
          store.products.length === 0 ? store.fetchProducts() : Promise.resolve(),
          !store.orders || store.orders.length === 0 ? store.fetchOrders() : Promise.resolve()
        ])
      } catch (error) {
        console.error('Failed to fetch data:', error)
      }
    })

    const formData = reactive({
      name: ''
    })

    const filteredVendors = computed(() => {
      let result = store.vendors || []
      
      if (searchQuery.value) {
        const query = searchQuery.value.toLowerCase()
        result = result.filter(v => v.name.toLowerCase().includes(query))
      }
      
      return result
    })
    
    const paginatedVendors = computed(() => {
      const startIndex = (currentPage.value - 1) * itemsPerPage.value
      const endIndex = startIndex + itemsPerPage.value
      return filteredVendors.value.slice(startIndex, endIndex)
    })

    // Make these computed to ensure reactivity
    const getVendorProductCount = (vendorId) => {
      return (store.products || []).filter(p => p.vendorId === vendorId).length
    }

    const getOrdersCount = (vendorId) => {
      const vendorProducts = (store.products || [])
        .filter(p => p.vendorId === vendorId)
        .map(p => p.id)

      if (!vendorProducts.length) return 0

      return (store.orders || []).filter(o => {
        return o.items?.some(item => vendorProducts.includes(item.productId))
      }).length
    }

    const navigateToProducts = (vendorId) => {
      router.push({
        path: '/products',
        query: { vendorId }
      })
    }

    const navigateToOrders = (vendorId) => {
      router.push({
        path: '/orders',
        query: { vendorId }
      })
    }

    const toggleDropdown = (vendorId) => {
      openDropdown.value = openDropdown.value === vendorId ? null : vendorId
    }

    const closeDropdown = () => {
      openDropdown.value = null
    }

    const editVendor = (vendor) => {
      editingVendor.value = vendor
      formData.name = vendor.name
      showAddForm.value = true
    }

    const closeModal = () => {
      showAddForm.value = false
      editingVendor.value = null
      formData.name = ''
      errorMsg.value = ''
    }

    const saveVendor = async () => {
      if (!formData.name.trim()) {
        errorMsg.value = 'Vendor name is required'
        return
      }

      submitting.value = true
      errorMsg.value = ''

      try {
        if (editingVendor.value) {
          await store.updateVendor({
            id: editingVendor.value.id,
            name: formData.name
          })
        } else {
          await store.createVendor({
            name: formData.name
          })
        }
        closeModal()
      } catch (error) {
        console.error('Error saving vendor:', error)
        errorMsg.value = `Failed to save vendor: ${error.message || 'Unknown error'}`
      } finally {
        submitting.value = false
      }
    }

    const deleteVendor = async (vendorId) => {
      const hasProducts = getVendorProductCount(vendorId) > 0
      
      if (hasProducts) {
        alert('Cannot delete vendor with associated products. Remove products first.')
        return
      }
      
      if (confirm('Are you sure you want to delete this vendor?')) {
        try {
          await store.deleteVendor(vendorId)
        } catch (error) {
          console.error('Error deleting vendor:', error)
          alert(`Failed to delete vendor: ${error.message || 'Unknown error'}`)
        }
      }
    }
    
    // Reset page when filters change
    watch(searchQuery, () => {
      currentPage.value = 1
    })

    return {
      showAddForm,
      submitting,
      errorMsg,
      editingVendor,
      formData,
      searchQuery,
      filteredVendors,
      paginatedVendors,
      currentPage,
      itemsPerPage,
      getVendorProductCount,
      getOrdersCount,
      closeModal,
      editVendor,
      saveVendor,
      deleteVendor,
      navigateToProducts,
      navigateToOrders,
      toggleDropdown,
      closeDropdown
    }
  }
}
</script>

<style scoped>
/* Search and Filter Styles */
.filters-container {
  display: flex;
  gap: 12px;
  margin-bottom: 20px;
}

.search-input {
  flex: 1;
  padding: 8px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
}

/* Badge Styles */
.badge {
  display: inline-block;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 12px;
  font-weight: 600;
  text-align: center;
}

.badge-success {
  background-color: #10b981;
  color: white;
}

.badge-info {
  background-color: #3b82f6;
  color: white;
}

.badge-clickable {
  cursor: pointer;
  border: none;
}

.badge-clickable:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Dropdown Styles */
.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-toggle {
  background: #f3f4f6;
  border: 1px solid #e5e7eb;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 14px;
  color: #374151;
  width: 95px;
  text-align: center;
}

.dropdown-toggle:hover {
  background: #e5e7eb;
}

.dropdown-open .dropdown-menu {
  display: block;
}

.dropdown-menu {
  display: none;
  position: absolute;
  right: 0;
  top: 100%;
  margin-top: 4px;
  width: 95px;
  background: white;
  border: 1px solid #e5e7eb;
  border-radius: 4px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  z-index: 9999;
}

.dropdown-item {
  display: block;
  width: 100%;
  padding: 8px 0;
  border: none;
  background: none;
  text-align: center;
  cursor: pointer;
  color: #374151;
  font-size: 14px;
}

.dropdown-item:hover {
  background: #f3f4f6;
}

.delete-action {
  color: #dc2626;
}

.delete-action:hover {
  background: #fecaca;
}
</style>
